<style lang="scss">
	.normal-flow {
		width: 100%;

		&.benchmark {
			max-width: 1000px;
		}

		&.virtual-dom {
			max-width: 600px;
		}
	}
</style>

<script lang="ts">
	import siteData from "$lib/site-data.json";
	import PageNav from "$lib/components/nav/PageNav.svelte";
	import { onMount } from "svelte";
	import PhotoSwipeLightbox from 'photoswipe/lightbox';
	import PhotoSwipe from 'photoswipe';
	import ZoomTip from "$lib/components/ZoomTip.svelte";

	onMount(() => {
		const lightbox = new PhotoSwipeLightbox({
			arrowPrev: false,
			arrowNext: false,
			gallery: '.pswp-gallery',
			children: 'a',
			pswpModule: () => PhotoSwipe
		});
		lightbox.init()
	});
</script>

<svelte:head>
	<title>Les performances des concurrents | { siteData.title }</title>
</svelte:head>

# Les perfomances des concurrents

Au-delà de la syntaxe, Svelte se différencie également de [React](https://fr.reactjs.org/) et [Vue.js](https://vuejs.org/) par ses perfomances.

Voici un tableau comparant les trois frameworks en termes de temps nécessaire pour effectuer certaines tâches, de rapidité de démarrage, et de mémoire consommée :

<ZoomTip />
<div class="pswp-gallery pswp-gallery--single-column">
  <a href="/images/benchmark.webp" 
    data-pswp-width="2677" 
    data-pswp-height="2006" 
    target="_blank"
		rel="noreferrer" >
    <img
			class="normal-flow benchmark"
			src="/images/benchmark.webp"
			alt="Données de perfomances Svelte VS Vue VS React" />
  </a>
</div>

Globalement, on remarque que React est à la traîne dans presque tous les domaines, et que Svelte l'emporte dans l'immense majorité des cas, bien que l'écart avec Vue soit nettement moindre qu'avec React. Pour certaines tâches, Vue se montre toutefois légèrement plus rapide que Svelte.

L'une des raisons pouvant expliquer cette différence est que React et Vue reposent sur la technologie dite du DOM Virtuel. Cela signfie que pendant l'exécution, ces frameworks gardent en mémoire une copie du DOM du navigateur, sur laquelle sont effectuées les modifications nécessaires après un changement d'état, pour enfin rendre dans le DOM du navigateur la différence entre ce dernier et le DOM virtuel.

<ZoomTip />
<div class="pswp-gallery pswp-gallery--single-column">
  <a href="/images/virtual-dom.webp" 
    data-pswp-width="1024" 
    data-pswp-height="685" 
    target="_blank"
		rel="noreferrer" >
    <img
			class="normal-flow virtual-dom"
			src="/images/virtual-dom.webp"
			alt="Schéma du DOM virtuel" />
  </a>
</div>

<br/>

Svelte, en revanche, s'affranchit complètement de cette étape. Les modifications sont **directement appliquées au DOM** du navigateur. 

En fait, Svelte **"compile"** ses composants en code **JavaScript vanilla optimisé** avant le déploiement, ce qui permet d'obtenir d'excellentes perfomances. Vue.js profite également de la "compilation" de ses composants pour les optimiser un peu, mais doit toujours se plier aux règles du DOM virtuel. Les composants React, eux, ne passent que par une phase de transpilation qui remplace les parties homologues à HTML par du JavaScript.

<PageNav
  before={{ url: "/competitors-syntax", text: "La syntaxe des concurrents" }}
	after={{ url: "/try-svelte", text: "Essayer Svelte" }}
/> 
