<script lang="ts">
  import siteData from "$lib/site-data.json";
  import PageNav from "$lib/components/nav/PageNav.svelte";
  import type { PageData } from "./$types";
  import Prism from 'svelte-prism';
  import loadLanguages from 'prismjs/components/';
  import TaskList from "$lib/demo/tasklist/TaskList.svelte";

  loadLanguages(['jsx']);

  export let data: PageData;
</script>

<svelte:head>
	<title>Les concurrents | { siteData.title }</title>
</svelte:head>

# Les concurrents

Svelte n'est pas le premier framework à proposer une approche à base de composants à la syntaxe plus ou moins déclarative. Les deux principaux concurrents qui lui précèdent sont [React](https://fr.reactjs.org/) et [Vue.js](https://vuejs.org/). Voyons en quoi Svelte se différencie de ces derniers.

## La syntaxe

Afin de comparer la syntaxe de React et Vue.js à celle de Svelte, nous allons examiner le code permettant d'obtenir le composant suivant (une liste de tâches) pour chacun de ces frameworks :

<TaskList />

<small>TaskList.svelte</small>
<Prism language="svelte" source={data.TaskListSvelte} />

<small>TaskList.js</small>
<Prism language="jsx" source={data.TaskListReact} />

<PageNav
  before={{url: "/reusable-components", text: "Les composants réutilisables"}}
/> 
