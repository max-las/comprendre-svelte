<style>
  table {
    table-layout: fixed;
  }
</style>

<script lang="ts">
  import siteData from "$lib/site-data.json";
  import PageNav from "$lib/components/nav/PageNav.svelte";
  import type { PageData } from "./$types";
  import TaskList from "$lib/demo/tasklist/TaskList.svelte";
  import Compare from "$lib/components/competitors/Compare.svelte";
  import { selectedCompetitor } from '$lib/stores';

  export let data: PageData;
</script>

<svelte:head>
	<title>Les concurrents | { siteData.title }</title>
</svelte:head>

# Les concurrents

Svelte n'est pas le premier framework à proposer une approche à base de composants à la syntaxe plus ou moins déclarative. Les deux principaux concurrents qui lui précèdent sont [React](https://fr.reactjs.org/) et [Vue.js](https://vuejs.org/). Voyons en quoi Svelte se différencie de ces derniers.

## La syntaxe

Afin de comparer la syntaxe de React et Vue.js à celle de Svelte, examinons le code permettant d'obtenir le composant suivant (une liste de tâches)&nbsp;:

<div class="block">
  <TaskList />
</div>

<Compare
  subject={{ fileName: "TaskList.svelte", name: "Svelte", code: data.highlighted.TaskListSvelte }}
  competitors={[
    { fileName: "TaskList.js", name: "React", code: data.highlighted.TaskListReactJs },
    { fileName: "TaskList.vue", name: "Vue.js", code: data.highlighted.TaskListVue }
  ]} />

{#if $selectedCompetitor === "React"}

La première différence entre React et Svelte est qu'un composant React s'écrit entièrement en javascript, avec toutefois une particularité : il est autorisé à retourner directement du code proche du HTML. Cette syntaxe se nomme **JSX**. Les différences entre cette syntaxe et celle de Svelte sont résumées dans le tableau suivant&nbsp;:

<table class="table table-striped">
  <thead>
    <tr>
      <th>React</th>
      <th>Svelte</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>
        Les composants sont déclarés sous forme de fonctions (ou classes) javascript, qui doivent être exportées puis importées afin d'être réutilisées</td>
      <td>
        Chaque fichier <code>.svelte</code> est automatiquement considéré comme un composant, nul besoin de déclarer et d'exporter une fonction à l'intérieur
      </td>
    </tr>
    <tr>
      <td>
        Il est impossible d'écrire du CSS dans les composants, mais il est possible d'importer des fichiers CSS comme des fichier JS
      </td>
      <td>
        Il est possible d'écrire du CSS dans une balise <code>&lt;style&gt;</code>
      </td>
    </tr>
    <tr>
      <td>
        Les conditions et les boucles ne peuvent se faire directement dans le template. Il faut soit déclarer en amont une fonction qui retourne un morceau de template selon la condition souhaitée et l'appeller; soit se débrouiller pour obtenir une collection de templates, comme ici en utilisant <code>.map</code> au lieu de <code>.forEach</code>
      </td>
      <td>
        La syntaxe permet d'utiliser des conditions <code>if</code> et des boucles <code>each</code> directement dans le template
      </td>
    </tr>
  </tbody>
</table>

Enfin, la **différence principale** concerne l'aspect [déclaratif](/declarative-programming). En React, pour que la mise à jour d'une variable déclenche la mise à jour du rendu, il faut employer une fonction particulière.

{/if}

{#if $selectedCompetitor === "Vue.js"}
	
{/if}



<PageNav
  before={{ url: "/reusable-components", text: "Les composants réutilisables" }}
/> 
