<script lang="ts">
  import siteData from "$lib/site-data.json";
  import PageNav from "$lib/components/nav/PageNav.svelte";
  import type { PageData } from "./$types";
  import CounterVanilla from "$lib/demo/counter/CounterVanilla.svelte";
  import Counter from "$lib/demo/counter/Counter.svelte";

  export let data: PageData;
</script>

<svelte:head>
	<title>La programmation déclarative | { siteData.title }</title>
</svelte:head>

# La programmation déclarative

Traditionnellement, lorsque l'on écrit un programme, on décrit une suite d'instructions à réaliser pour obtenir un résultat souhaité. Ce paradigme s'appelle la **programmation impérative**.

Prenons un exemple en **JavaScript Vanilla** <small>(c'est-à-dire tel qu'il est supporté nativement par les navigateurs)</small>.

Supposons que l'on souhaite réaliser un compteur de clics, sous la forme d'un bouton. À chaque clic sur le bouton, la valeur du compteur s'incrémente de 1.

<small>Code HTML et JavaScript :</small>
{@html data.highlighted.CounterVanillaHtml}

<small>Résultat :</small>
<div class="block">
  <CounterVanilla />
</div>

Dans cet exemple, nous déclarons une variable `count` qui contient la valeur du compteur, initialement à 0.<br>
Au clic sur le bouton (identifié ici par son *id*), nous devons effectuer trois choses :
 1. Incrémenter la valeur de `count` de 1
 2. Récupérer la zone d'affichage du compte (identifiée ici par une balise `<span>` pourvue d'un *id*)
 3. Mettre à jour le contenu de cette zone pour refléter la nouvelle valeur de `count`

<hr>

Voyons maintenant comment réaliser ce même compteur en **Svelte**.

<small>Code Svelte :</small>
{@html data.highlighted.CounterSvelte}

<small>Résultat :</small>
<div class="block">
  <Counter />
</div>

Nous retrouvons notre variable `count` initialisée à 0.
Cependant nous pouvons remarquer deux principales différences : 
 - `count` est directement référencée là où nous souhaitons voir apparaître son contenu dans le HTML, de manière similaire à un langage de templating comme [HandleBars](https://handlebarsjs.com/)
 - Le code consistant à sélectionner des éléments du DOM et à les mettre à jour a disparu

Pourtant, les changements de valeurs du compte son bel et bien visibles. Svelte sait que si cette valeur change, son affichage doit changer aussi, et il s'en charge pour nous.

Ici, **contrairement** à la **programmation impérative**, nous décrivons directement l'état du résultat en fonction de certaines variables, puis nous nous contentons de modifier ces variables au gré des interactions. C'est ce paradigme qui se nomme **programmation déclarative**.

Cette approche a deux principaux avantages par rapport à l'approche traditionnelle :
 - Il est plus facile de se représenter le résultat final en jettant un œil au code, ce qui libère un peu la charge mentale
 - Le code à écrire pour gérer l'affichage est drastiquement réduit, ce qui fait gagner du temps

<PageNav
  before={{ url: "/what-is-svelte", text: "Qu'est-ce que Svelte ?" }}
  after={{ url: "/reusable-components", text: "Les composants réutilisables" }}
/> 
